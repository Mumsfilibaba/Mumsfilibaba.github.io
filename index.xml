<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alexander Dahlin</title>
    <link>/</link>
    <description>Recent content on Alexander Dahlin</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Dec 2024 16:27:10 +0100</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Publications</title>
      <link>/publications/</link>
      <pubDate>Wed, 18 Dec 2024 16:27:10 +0100</pubDate>
      <guid>/publications/</guid>
      <description>&lt;img src=&#34;./images/short_paper.jpg&#34; alt=&#34;hobby_engine&#34; class=&#34;portfolio-image&#34;&gt;&#xA;&lt;h3 id=&#34;improving-ray-tracing-performance-with-variable-rate-shading-short-paper&#34;&gt;&#xA;  Improving Ray Tracing Performance with Variable Rate Shading (Short Paper)&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Eurographics&lt;/strong&gt; | &lt;em&gt;Sep. 2021&lt;/em&gt;&#xA;&lt;strong&gt;&lt;em&gt;Abstract:&lt;/em&gt;&lt;/strong&gt; Hardware-accelerated ray tracing has enabled ray traced reflections for real-time applications such as games. However, the number of traced rays during each frame must be kept low to achieve expected frame rates. Therefore, techniques such as rendering the reflections at quarter resolution are used to limit the number of rays. The recent hardware features inline ray tracing, and variable rate shading (VRS) could be combined to limit the number of rays even further. This research aims to use hardware VRS to limit the number of rays while maintaining the visual quality in the final rendered image. An experiment with performance tests is performed on a rendering pipeline using different techniques to generate rays. The techniques use inline ray tracing combined with VRS and ray generation shaders. These are compared and evaluated using performance tests and the image evaluator ꟻLIP. The results show that limiting the number of rays with hardware VRS leads to improved performance while the difference in visual quality remains comparable.&#xA;&lt;a href=&#34;https://diglib.eg.org/items/6c5fff4d-dd69-44eb-a8e0-c3da82a10b8e&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View on Eurographics&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Wed, 18 Dec 2024 16:07:24 +0100</pubDate>
      <guid>/projects/</guid>
      <description>&lt;img src=&#34;./images/vulkan_path_tracer.png&#34; alt=&#34;vulkan_path_tracer&#34; class=&#34;portfolio-image&#34;&gt;&#xA;&lt;h3 id=&#34;vulkan-path-tracer&#34;&gt;&#xA;  Vulkan Path Tracer&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A path tracing application developed with &lt;strong&gt;C++&lt;/strong&gt; and &lt;strong&gt;GLSL&lt;/strong&gt;, utilizing &lt;strong&gt;Vulkan&lt;/strong&gt; for both software and hardware-accelerated ray tracing. This project began due to me wanting to learn how to construct and optimize Bounding Volume Hierarchies (BVH) using Surface Area Heuristics (SAH) to enhance ray tracing performance. It then evolved into a platform for experimenting with Vulkan ray tracing.&#xA;&lt;a href=&#34;https://github.com/Mumsfilibaba/Vulkan-Project/tree/Path-Tracer&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&#xA;&lt;img src=&#34;./images/hobby_engine.png&#34; alt=&#34;hobby_engine&#34; class=&#34;portfolio-image&#34;&gt;&#xA;&lt;h3 id=&#34;hobby-rendering-engine&#34;&gt;&#xA;  Hobby Rendering Engine&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;This is a personal rendering and game engine created to test and experiment with a variety of rendering techniques. Initially conceived as a small project for learning for DirectX Raytracing (DXR) experimentation, it has grown into a versatile platform featuring both &lt;strong&gt;DirectX 12 (D3D12)&lt;/strong&gt; and &lt;strong&gt;Vulkan&lt;/strong&gt; backends. The project now focuses on abstracting graphics APIs, exploring game engine architecture, and implementing advanced rendering techniques.&#xA;&lt;a href=&#34;https://github.com/Mumsfilibaba/DXR-Project/tree/Vulkan_RayTracing&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 18 Dec 2024 16:06:58 +0100</pubDate>
      <guid>/about/</guid>
      <description>&lt;img src=&#34;./images/profile.jpg&#34; alt=&#34;Portrait&#34; class=&#34;profile-portrait&#34;&gt;&#xA;&lt;p&gt;I&amp;rsquo;m Alexander Dahlin, a passionate Software Engineer specializing in graphics and rendering. I currently work as a Rendering Engineer at Crytek, where I contribute to CryEngine and Hunt: Showdown – 1896. Previously, I earned a master&amp;rsquo;s degree in Game and Software Engineering from the Blekinge Institute of Technology.&lt;/p&gt;&#xA;&lt;p&gt;I am proficient in C++ and have extensive experience in real-time rendering, low-level graphics APIs (D3D12 and Vulkan), CPU and GPU optimizations, console development (Xbox One, Xbox Series, PlayStation 4), memory management, multithreading, and working with large codebases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resume</title>
      <link>/resume/</link>
      <pubDate>Wed, 18 Dec 2024 16:06:47 +0100</pubDate>
      <guid>/resume/</guid>
      <description>&lt;h2 id=&#34;alexander-dahlin---graphics-programmer&#34;&gt;&#xA;  &lt;em&gt;Alexander Dahlin - Graphics Programmer&lt;/em&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;technical-skills&#34;&gt;&#xA;  Technical Skills&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proficient in:&lt;/strong&gt; C++, HLSL, GLSL&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Familiar with:&lt;/strong&gt; C, Objective-C, C#, JavaScript, HTML, CSS&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Technologies:&lt;/strong&gt; DirectX 12, DXR, Vulkan, OpenGL, Microsoft GDK, DirectStorage&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Developer Tools:&lt;/strong&gt; Visual Studio, Xcode, Git, Perforce, PIX, NVIDIA Nsight Graphics, RenderDoc, Xbox GDK tools (PIX, Debugger etc.), Jira&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Libraries:&lt;/strong&gt; ImGui, Assimp, GLFW, GLM, DirectXMath, DirectX Shader Compiler, SPIRV-Cross&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Platforms:&lt;/strong&gt; Windows (PC), macOS, Xbox One, Xbox Series, PlayStation 4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;language-skills&#34;&gt;&#xA;  Language Skills&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fluent in &lt;strong&gt;English&lt;/strong&gt; and &lt;strong&gt;Swedish&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;work-experience&#34;&gt;&#xA;  Work Experience&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;&#xA;&lt;span style=&#34;text-decoration: underline;&#34;&gt;Rendering Engineer&lt;/span&gt;&lt;/strong&gt; | &lt;em&gt;Mar. 2023 – Present&lt;/em&gt;&#xA;&lt;strong&gt;Crytek, GmbH&lt;/strong&gt; | &lt;em&gt;Malmö, SE (Fully remote)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
